# coding: utf-8

"""
    aics-api

    AI-Customer-Service - Core API

    The version of the OpenAPI document: 2024-10-21T08:32:58Z
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, Field, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from openapi_client.models.aicusapico35klz_y80ik_ph_items_inner_qa_list_inner import Aicusapico35klzY80ikPhItemsInnerQAListInner
from typing import Optional, Set
from typing_extensions import Self

class Aicusapico35klzY80ikPhItemsInner(BaseModel):
    """
    Aicusapico35klzY80ikPhItemsInner
    """ # noqa: E501
    s3_path: StrictStr = Field(alias="s3Path")
    create_time: StrictStr = Field(alias="createTime")
    s3_prefix: StrictStr = Field(alias="s3Prefix")
    qa_list: Optional[List[Aicusapico35klzY80ikPhItemsInnerQAListInner]] = Field(default=None, alias="QAList")
    status: StrictStr
    __properties: ClassVar[List[str]] = ["s3Path", "createTime", "s3Prefix", "QAList", "status"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Aicusapico35klzY80ikPhItemsInner from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in qa_list (list)
        _items = []
        if self.qa_list:
            for _item in self.qa_list:
                if _item:
                    _items.append(_item.to_dict())
            _dict['QAList'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Aicusapico35klzY80ikPhItemsInner from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "s3Path": obj.get("s3Path"),
            "createTime": obj.get("createTime"),
            "s3Prefix": obj.get("s3Prefix"),
            "QAList": [Aicusapico35klzY80ikPhItemsInnerQAListInner.from_dict(_item) for _item in obj["QAList"]] if obj.get("QAList") is not None else None,
            "status": obj.get("status")
        })
        return _obj


